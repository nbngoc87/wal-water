hhs_ss_wal <- hhs_ss[hhs_ss$regicd %in% 3000,]
### administrative borders -----------
load(file = here(
pdir,
"admin_border_Be/admin_Be.Rdata"
))
stst_wal <- stst[stst$regicd %in% 3000, ]
### builtup density at ss -----------
load(file = here(
pdir,
"urban_5cat_Ahmed_Wal/urban_5cat_ss_Wal.Rdata"
))
### projected nbhh IWEPS ----------
prjnhh <- read.xlsx(here(rdir, "sode_proj_IWEPS_Wal", "244601.xlsx"), sheetIndex = 1, startRow = 11)[,c(1:2, 6:8, 5)]
colnames(prjnhh) <- c("municd", "type", "nhh_2020", "nhh_2025", "nhh_2030", "nhh_2035")
prjnhh <- prjnhh[prjnhh$type %in% "Commune", c(1,3:6)]
### projected pop IWEPS ----------
prjpop <- read.xlsx(here(rdir, "sode_proj_IWEPS_Wal", "244600.xlsx"), sheetIndex = 1, startRow = 11)[,c(1:2, 6:8, 5)]
colnames(prjpop) <- c("municd", "type", "pop_2020", "pop_2025", "pop_2030", "pop_2035")
prjpop <- prjpop[prjpop$type %in% "Commune", c(1,3:6)]
knitr::knit_exit()
#+ notcorrectedyet
# 3. process data------------------
## 3.1. utility survey -----------
us <- us[!is.na(us$hhs_18_95) & us$hhs_18_95 > 0 & !is.na(us$rwtank),]
us_age <- 2014 - us[, grep("by_", colnames(us))]
us_age[us_age < 0] <- NA
us$hhs_20_95 <-
apply(us_age, 1, function(x)
sum(x >= 20, na.rm = T))
us$hhs_0_19 <-  apply(us_age, 1, function(x)
sum(x < 20, na.rm = T))
# table(us$hhs_tot)
#
# prop.table(table(us$hhs_20_95))
#
# table(us$hhs_0_19)
us$hhs_cat <- paste0("hhs_", ifelse(us$hhs_tot < 5, as.character(us$hhs_tot), "5+"))
us$rpage_cat <- cut(us$rpage, breaks = c(seq(15, 80, 5), 150), include.lowest = T, right = F)
us <- left_join(us, bltupss)
### houshold size proportion ---------
hhs_prob_us  <- prop.table(table(us$hhs_tot))
bighh_us <- us[us$hhs_tot > 4,] %>%
group_by(hhs_tot) %>%
summarise(count_us = n())
bighh_us$prop_us <- bighh_us$count_us/sum(bighh_us$count_us)
## 3.2. ggs ------------
ggs <- ggs_wal[, c("arid", "ahhsize", grep("ahg", colnames(ggs_wal), value = T))]
colnames(ggs)[1:2] <- c("id", "hhs_tot")
ggs_age <- ggs[, grep("ahg5_", colnames(ggs))]
ggs$hhs_20_95 <-
apply(ggs_age, 1, function(x)
sum(x >= 20, na.rm = T))
ggs$hhs_0_19 <-  apply(ggs_age, 1, function(x)
sum(x <20, na.rm = T))
ggs$hhs_cat <- paste0("hhs_", ifelse(ggs$hhs_tot < 5, as.character(ggs$hhs_tot), "5+"))
ggs$rpage_cat <- cut(ggs$ahg5_1, breaks = c(seq(15, 80, 5), 150), include.lowest = T, right = F)
### houshold size proportion ---------
hhs_prob_ggs <- prop.table(table(ggs$hhs_tot))
bighh_ggs <- ggs[ggs$hhs_tot > 4,] %>%
group_by(hhs_tot) %>%
summarise(count_ggs = n())
bighh_ggs$prop_ggs <- bighh_ggs$count_ggs/sum(bighh_ggs$count_ggs)
## 3.3.  statistical sectors -----------------
### hhs ----------
hhs_ss_wal <- left_join(hhs_ss_wal, bltupss[, c("ststcd", "LU2010_5cls_x25")])
hhs_ss_lg <- melt(hhs_ss_wal[,c("ststcd", "year", "hhs_1", "hhs_2", "hhs_3", "hhs_4", "hhs_5+")], id.vars = c("ststcd", "year"))
colnames(hhs_ss_lg)[3:4] <- c("hhsize", "obs")
hhs_ss_lg <- left_join(hhs_ss_lg, st_drop_geometry(stst_wal[,c("ststcd", "municd")]))
### houshold size proportion ---------
hhs_ss_wal_sub <- hhs_ss_wal[, grep("hhs_", colnames(hhs_ss_wal), value =T)][,1:5]
hhs_ss <- apply(hhs_ss_wal_sub, 2, sum, na.rm = T)
freq_ss <- hhs_ss/sum(hhs_ss)
hhs_prob_ss <- c(freq_ss[1:4], freq_ss[5]*bighh_ggs$prop_ggs)
### age -------------
age_ss_wal <- age_ss[age_ss$regicd %in% 3000,]
age_ss_wal <-
age_ss_wal[, c(grep("age_", colnames(age_ss_wal), value = T), "ststcd", "year", "population")]
age_ss_wal$hhs_0_19 <- apply(age_ss_wal[,1:4], 1, sum, na.rm = T)
age_ss_wal$hhs_20_95 <- apply(age_ss_wal[,5:17], 1, sum, na.rm = T)
### population density -------------
stst_wal$area <- st_area(stst_wal)/1e6
age_ss_wal <- left_join(age_ss_wal, st_drop_geometry(stst_wal[, c("ststcd", "area")]))
age_ss_wal$dens <- as.numeric(age_ss_wal$population/age_ss_wal$area)
age_ss_wal$dens_cat <-cut(age_ss_wal$dens, breaks = c(0, 300, 1500, max(age_ss_wal$dens, na.rm = T)), include.lowest = T, right = F)
hist(age_ss_wal$dens, breaks = 300)
abline(v = c(300, 1500), col = "red")
table(age_ss_wal$dens_cat)
## 3.4. rainwater tank ----------
## 3.5. projected nbhh ---------
prjnhh_lg <- melt(prjnhh, id.vars = "municd")
colnames(prjnhh_lg)[3] <- "prj_iweps"
prjnhh_lg$year <- as.numeric(gsub("nhh_", "", prjnhh_lg$variable))
prjnhh_lg <- prjnhh_lg[order(prjnhh_lg$municd, prjnhh_lg$year), c("municd", "year", "prj_iweps")]
## 3.6. projected pop ---------
prjpop_lg <- melt(prjpop, id.vars = "municd")
colnames(prjpop_lg)[3] <- "prj_iweps"
prjpop_lg$year <- as.numeric(gsub("pop_", "", prjpop_lg$variable))
prjpop_lg <- prjpop_lg[order(prjpop_lg$municd, prjpop_lg$year), c("municd", "year", "prj_iweps")]
plotdf1 <- inner_join(hhs_ss_lg, hhs_sim_agg_lg)
plotdf1 <- inner_join(plotdf1, bltupss[,1:2])
plotdf1 <- inner_join(hhs_ss_lg, hhs_sim_agg_lg)
plotdf1 <- inner_join(plotdf1, bltupss[,c(1, 4)])
ggplot(plotdf1, aes(x = obs, y = hhs_sim)) +
geom_point()  +
geom_smooth(method = "lm", se = F, color = "black", formula = y ~ x) +
geom_abline(intercept = 0, slope = 1, color = "red", size = 1) +
stat_poly_eq(formula = y ~ x, aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), parse = TRUE) +
facet_wrap(.~ hhsize, scales = "free") +
theme_kat()
test <- glm((hhs_0_19 + 1) ~ as.factor(hhs_tot)*rpage_cat*as.factor(LU2010_5cls_x25), data = us, family = "poisson")
summary(test)
test <- glm((hhs_0_19 + 1) ~ as.factor(hhs_tot)*rpage_cat*as.factor(LU2010_5cls_x25), data = us, family = "poisson", na.action = na.exclude)
pred <- predict(test)
pred <- predict(test, type = "link")
pred <- predict(test, type = "response")
pred <- predict(test, type = "response", se.fit = T)
View(pred)
pred <- predict(test, type = "link", se.fit = T)
pred <- predict(test, type = "response")
lvls(hhs_0_19)
lvls(us$hhs_0_19)
test.pred <- sapply(pred, function(x) {
if (is.na(x)) {
res <- NA
} else {
res <- rpois(1:7, lamda = x)
}
res
})
test.pred <- sapply(pred, function(x) {
if (is.na(x)) {
res <- NA
} else {
res <- rpois(1:7, lambda = x)
}
res
})
pred
pred <- predict(test, type = "response")
test.pred <- sapply(pred, function(x) {
if (is.na(x)) {
res <- NA
} else {
res <- rpois(1, lambda = x)
}
res
})
plot(us$hhs_0_19, test.pred-1)
us$nch_prd_pois <- test.pred - 1
### fitting -------------------
loadpackage("nnet")
ggplot(us, aes(hhs_0_19, nch_prd_pois)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
us$nch_prd_pois <- test.pred
ggplot(us, aes(hhs_0_19, nch_prd_pois)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
us$nch_prd_pois <- ifelse(test.pred > 0, test.pred - 1, test.pred)
ggplot(us, aes(hhs_0_19, nch_prd_pois)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
mtnf <- multinom(hhs_0_19 ~ as.factor(hhs_tot)*rpage_cat*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude)
system.time(mtnf <- multinom(hhs_0_19 ~ as.factor(hhs_tot)*rpage_cat*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000))
system.time(mtnf <- multinom(hhs_0_19 ~ as.factor(hhs_tot)*rpage_cat*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000, niter = 1000))
system.time(mtnf <- multinom(hhs_0_19 ~ as.factor(hhs_tot)*rpage_cat*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000, maxit = 1000))
summary(mtnf)
pred <- predict(mtnf)
pred <- predict(mtnf, type = "raw")
pred <- predict(mtnf, type = "class")
table(pred)
table(us$hhs_0_19)
pred <- predict(mtnf, type = "prob")
head(pred)
t <- sapply(pred, sum, na.rm = T)
t <- apply(pred, 1, sum, na.rm = T)
table(t)
pred <- predict(mtnf, type = "class")
pred <- predict(mtnf, type = "prob")
us$nch_prd_mtn <- predict(mtnf, type = "class")
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
v <- predict(mtnf, type = "class")
str(v)
pred <- predict(test, type = "response")
test.pred <- sapply(pred, function(x) {
if (is.na(x)) {
res <- NA
} else {
res <- rpois(1, lambda = x)
}
res
})
us$nch_prd_mtn <- as.integer(as.character(predict(mtnf, type = "class") ))
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
pred <- predict(mtnf, type = "prob")
x <- unlist(pred[1,])
sum(x, na.rm) != 1
sum(x, na.rm = T) != 1
x <- unlist(pred[2,])
sum(x, na.rm = T) != 1
pred[2,]
sum(x, na.rm = T)
sum(x, na.rm = T) != 1
sum(x, na.rm = T) == 1
t <- sum(x, na.rm = T)
sum(x, na.rm = T) %in% 1
sum(x, na.rm = T) > 0
res <- rmultinom(1, 1, prob = x)
v <- rmultinom(1, 1, prob = x)
which(v ==1)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
us$nch_prd_mtn <- test.pred
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
us$nch_prd_mtn <- test.pred
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
us$nch_prd_mtn <- test.pred
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
us$nch_prd_mtn <- as.integer(as.character(predict(mtnf, type = "class")))
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
us$nch_prd_mtn <- as.integer(as.character(predict(mtnf, type = "class")))
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
system.time(mtnf <- multinom(hhs_0_19 ~ as.factor(hhs_tot)*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000, maxit = 1000))
us$nch_prd_mtn <- as.integer(as.character(predict(mtnf, type = "class")))
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
pred <- predict(mtnf, type = "prob")
x <- unlist(pred[2,])
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
us$nch_prd_mtn <- test.pred
ggplot(us, aes(hhs_0_19, nch_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
save.image("C:/Users/nbngo/OneDrive/PhD/wal-water/data/processed/pop_synth_Wal/temp.RData")
load("C:/Users/nbngo/OneDrive/PhD/wal-water/data/processed/pop_synth_Wal/temp.RData")
loadpackage("here")
loadpackage("reshape2")
loadpackage("ggplot2")
loadpackage("dplyr")
loadpackage("MASS")
loadpackage("scico")
loadpackage("tidyr")
loadpackage("sf")
loadpackage("xlsx")
loadpackage("ggpmisc")
head(hhs_sim)
#### rpage
##### with us
system.time(mtnf <- multinom(rpage_cat ~ as.factor(hhs_tot)*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000, maxit = 1000))
#### later ------------
loadpackage("nnet")
#### rpage
##### with us
system.time(mtnf <- multinom(rpage_cat ~ as.factor(hhs_tot)*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000, maxit = 1000))
us$rpac_prd_mtn <- as.integer(as.character(predict(mtnf, type = "class")))
plotdf <- us[,c("rpac_prd_mtn", "rpage_cat")]
plotdf$rpac_prd_mtn <- as.numeric(as.factor(plotdf$rpac_prd_mtn))
plotdf$rpage_cat <- as.numeric(as.factor(plotdf$rpage_cat))
ggplot(plotdf, aes(rpage_cat, rpac_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
pred <- predict(mtnf, type = "prob")
View(pred)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
plotdf$nch_prd_mtn <- test.pred
plotdf$rpac_prd_mtn <- test.pred
ggplot(plotdf, aes(rpage_cat, rpac_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
table(plotdf$rpac_prd_mtn)
table(plotdf$rpage_cat)
plotdf$rpac_prd_mtn <- test.pred + 1
ggplot(plotdf, aes(rpage_cat, rpac_prd_mtn)) + geom_jitter() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
nrow(hhs_sim)
test <- hhs_sim[1:1000,]
head(test)
test_lg <- melt(test, id.vars = c("ststcd", "year", "LU2010_5cls_x25"))
test_ind <- test_lg[rep(1:nrow(test_lg), test_lg$value), c("ststcd", "year", "LU2010_5cls_x25", "variable")]
test_ind$hhs_tot <- as.numeric(gsub("hhs_", "", test_ind$variable))
head(test_ind)
system.time(mtnf <- multinom(hhs_0_19 ~ as.factor(hhs_tot)*as.factor(LU2010_5cls_x25), data = us, na.action = na.exclude, MaxNWts =10000000, maxit = 1000))
pred <- predict(mtnf, type = "prob", newdata = test_ind)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
test_ind <- test.pred
test_ind <- test_lg[rep(1:nrow(test_lg), test_lg$value), c("ststcd", "year", "LU2010_5cls_x25", "variable")]
test_ind$hhs_tot <- as.numeric(gsub("hhs_", "", test_ind$variable))
test_ind$pred <- test.pred
head(test_ind)
test_ind <- test_lg[rep(1:nrow(test_lg), test_lg$value), c("ststcd", "year", "LU2010_5cls_x25", "variable")]
test_ind$hhs_tot <- as.numeric(gsub("hhs_", "", test_ind$variable))
test_ind$nch <- test.pred
test_ind$nad <- test.pred
test_ind$nch <- test.pred
test_ind$nad <- test_ind$hhs_tot - test_ind$bcg
test_ind$nad <- test_ind$hhs_tot - test_ind$nch
head(test_ind)
test_agg <- test_ind %>%
group_by(ststcd, year) %>%
summarise(nad = sum(nad, na.rm = T),
nch = sum(nch, na.rm = T))
plotdf <- inner_join(test_agg, age_ss_wal)
ggplot(plotdf, aes(x = hhs_0_19, y = nch)) + geom_point() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
test <- hhs_sim
head(test)
test_lg <- melt(test, id.vars = c("ststcd", "year", "LU2010_5cls_x25"))
test_ind <- test_lg[rep(1:nrow(test_lg), test_lg$value), c("ststcd", "year", "LU2010_5cls_x25", "variable")]
pred <- predict(mtnf, type = "prob", newdata = test_ind)
test_ind$hhs_tot <- as.numeric(gsub("hhs_", "", test_ind$variable))
head(test_ind)
pred <- predict(mtnf, type = "prob", newdata = test_ind)
# x <- unlist(pred[2,])
nlvls(test_ind$ststcd)
test_ind <- inner_join(test_ind,st_drop_geometry(stst_wal[,c("ststcd", "municd")]) )
mncdls <- lvls(test_ind$municd)
a <- mncdls[1]
resls <- lapply(mncdls[1:2], function(a) {
newdf <- test_ind[test_ind$mncdls %in% a,]
pred <- predict(mtnf, type = "prob", newdata = newdf)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
newdf$nch <- test.pred
newdf$nad <- newdf$hhs_tot - newdf$nch
aggdf <- newdf %>%
group_by(ststcd, year) %>%
summarise(nad = sum(nad, na.rm = T),
nch = sum(nch, na.rm = T))
})
a <- mncdls[1]
newdf <- test_ind[test_ind$mncdls %in% a,]
pred <- predict(mtnf, type = "prob", newdata = newdf)
head(newdf)
resls <- lapply(mncdls[1:2], function(a) {
newdf <- test_ind[test_ind$municd %in% a,]
pred <- predict(mtnf, type = "prob", newdata = newdf)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
newdf$nch <- test.pred
newdf$nad <- newdf$hhs_tot - newdf$nch
aggdf <- newdf %>%
group_by(ststcd, year) %>%
summarise(nad = sum(nad, na.rm = T),
nch = sum(nch, na.rm = T))
})
test <- hhs_sim
test <- inner_join(test,st_drop_geometry(stst_wal[,c("ststcd", "municd")]) )
mncdls <- lvls(test$municd)
rm(test_ind)
test <- hhs_sim
test <- inner_join(test,st_drop_geometry(stst_wal[,c("ststcd", "municd")]) )
head(test)
mncdls <- lvls(test$municd)
resls <- lapply(mncdls[1:2], function(a) {
df <- test[test$municd %in% a,]
dflg <- melt(df, id.vars = c("ststcd", "year", "LU2010_5cls_x25"))
df_ind <- dflg[rep(1:nrow(dflg), dflg$value), c("ststcd", "year", "LU2010_5cls_x25", "variable")]
df_ind$hhs_tot <- as.numeric(gsub("hhs_", "", df_ind$variable))
pred <- predict(mtnf, type = "prob", newdata = df_ind)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
df_ind$nch <- test.pred
df_ind$nad <- df_ind$hhs_tot - df_ind$nch
aggdf <- df_ind %>%
group_by(ststcd, year) %>%
summarise(nad = sum(nad, na.rm = T),
nch = sum(nch, na.rm = T))
aggdf
})
plotdf <- lapply(resls, rbind.data.frame)
plotdf <- Reduce(rbind.data.frame, resls)
plotdf <- inner_join(plotdf, age_ss_wal)
ggplot(plotdf, aes(x = hhs_0_19, y = nch)) + geom_point() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
# a <- mncdls[1]
tmn <- sample(mncdls, 2)
resls <- lapply(tmn, function(a) {
df <- test[test$municd %in% a,]
dflg <- melt(df, id.vars = c("ststcd", "year", "LU2010_5cls_x25"))
df_ind <- dflg[rep(1:nrow(dflg), dflg$value), c("ststcd", "year", "LU2010_5cls_x25", "variable")]
df_ind$hhs_tot <- as.numeric(gsub("hhs_", "", df_ind$variable))
pred <- predict(mtnf, type = "prob", newdata = df_ind)
test.pred <- apply(pred, 1, function(x) {
if (sum(x, na.rm = T) > 0) {
v <- rmultinom(1, 1, prob = x)
res <- which(v ==1) - 1
} else {
res <- NA
}
res
})
df_ind$nch <- test.pred
df_ind$nad <- df_ind$hhs_tot - df_ind$nch
aggdf <- df_ind %>%
group_by(ststcd, year) %>%
summarise(nad = sum(nad, na.rm = T),
nch = sum(nch, na.rm = T))
aggdf
})
plotdf <- Reduce(rbind.data.frame, resls)
plotdf <- inner_join(plotdf, age_ss_wal)
test_ind$nch <- test.pred
ggplot(plotdf, aes(x = hhs_0_19, y = nch)) + geom_point() +
stat_poly_eq(formula = y ~ x,
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
